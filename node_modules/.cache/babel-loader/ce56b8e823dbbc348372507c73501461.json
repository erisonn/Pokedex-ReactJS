{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useApiRequest = url => {\n  _s();\n\n  const [next, setNext] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pokemons, setPokemons] = useState([]);\n  const abortController = new AbortController();\n\n  const loadPokemons = () => {\n    if (error) {\n      setError(null);\n      setIsLoading(true);\n    }\n\n    fetch(url, {\n      signal: myAbortController.signal\n    }).then(response => response.json()).then(PokemonData => {\n      setNext(PokemonData.next);\n\n      if (PokemonData.previous === null) {\n        setPokemons(PokemonData.results);\n      } else {\n        setPokemons([...pokemons, ...PokemonData.results]);\n      }\n    }).catch(error => {\n      console.log(error);\n      setError('Error on load.');\n    }).finally(() => {\n      setIsLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    loadPokemons();\n  }, [url]);\n  return {\n    next,\n    isLoading,\n    error,\n    pokemons,\n    loadPokemons\n  };\n};\n\n_s(useApiRequest, \"CbqyQcFJnsjVOfDw4YJS2U20De4=\");\n\nexport default useApiRequest;","map":{"version":3,"sources":["/home/erison/Documents/Projetos/Pokedex-ReactJS/src/hooks/useApiRequest.js"],"names":["useState","useEffect","useApiRequest","url","next","setNext","isLoading","setIsLoading","error","setError","pokemons","setPokemons","abortController","AbortController","loadPokemons","fetch","signal","myAbortController","then","response","json","PokemonData","previous","results","catch","console","log","finally"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAGC,GAAG,IAAI;AAAA;;AAEzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMY,eAAe,GAAG,IAAIC,eAAJ,EAAxB;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACvB,QAAGN,KAAH,EAAU;AACNC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AACDQ,IAAAA,KAAK,CAACZ,GAAD,EAAM;AAAEa,MAAAA,MAAM,EAAEC,iBAAiB,CAACD;AAA5B,KAAN,CAAL,CACCE,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,WAAW,IAAI;AACjBhB,MAAAA,OAAO,CAACgB,WAAW,CAACjB,IAAb,CAAP;;AACA,UAAIiB,WAAW,CAACC,QAAZ,KAAyB,IAA7B,EAAmC;AAC/BX,QAAAA,WAAW,CAACU,WAAW,CAACE,OAAb,CAAX;AACH,OAFD,MAEO;AACHZ,QAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAc,GAAGW,WAAW,CAACE,OAA7B,CAAD,CAAX;AACH;AACJ,KATD,EAUCC,KAVD,CAUOhB,KAAK,IAAI;AACZiB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACAC,MAAAA,QAAQ,CAAC,gBAAD,CAAR;AACH,KAbD,EAcCkB,OAdD,CAcS,MAAM;AACXpB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACH,KAhBD;AAiBH,GAtBD;;AAwBAN,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAO,IAAAA,YAAY;AAGf,GANQ,EAMN,CAACX,GAAD,CANM,CAAT;AAQA,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA,KAAlB;AAAyBE,IAAAA,QAAzB;AAAmCI,IAAAA;AAAnC,GAAP;AAEH,CA3CD;;GAAMZ,a;;AA6CN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect } from \"react\"\n\nconst useApiRequest = url => {\n\n    const [next, setNext] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState(null)\n    const [pokemons, setPokemons] = useState([])\n\n    const abortController = new AbortController();\n\n    const loadPokemons = () => {\n        if(error) {\n            setError(null)\n            setIsLoading(true)\n        }\n        fetch(url, { signal: myAbortController.signal })\n        .then(response => response.json())\n        .then(PokemonData => {\n            setNext(PokemonData.next)\n            if (PokemonData.previous === null) {\n                setPokemons(PokemonData.results)\n            } else {\n                setPokemons([...pokemons, ...PokemonData.results])\n            }     \n        })\n        .catch(error => {\n            console.log(error)\n            setError('Error on load.')\n        })\n        .finally(() => {\n            setIsLoading(false)\n        })\n    }\n\n    useEffect(() => {\n        setIsLoading(true)\n\n        loadPokemons()\n\n        \n    }, [url])\n\n    return {next, isLoading, error, pokemons, loadPokemons }\n\n}\n\nexport default useApiRequest;"]},"metadata":{},"sourceType":"module"}