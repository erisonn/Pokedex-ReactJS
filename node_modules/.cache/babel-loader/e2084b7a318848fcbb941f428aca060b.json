{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback, useRef, useMemo } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport capitalizeFirstLetter from \"../utils/helpers\";\n\nconst useApiRequest = url => {\n  _s();\n\n  const [next, setNext] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pokemons, setPokemons] = useState([]);\n  const {\n    term\n  } = useParams();\n  const abortController = useMemo(() => {\n    new AbortController();\n  }, [ab]);\n  const previous = useRef(null);\n  const loadPokemons = useCallback(isMounted => {\n    if (error) {\n      setError(null);\n      setIsLoading(true);\n    }\n\n    fetch(url, {\n      signal: AbortController.signal\n    }).then(response => response.json()).then(dataSet => {\n      if (isMounted) {\n        setNext(dataSet.next);\n      }\n\n      Promise.all(dataSet.results.filter(pokemon => {\n        if (!term) {\n          return pokemon;\n        } else if (pokemon.name.includes(term)) {\n          return pokemon;\n        }\n\n        return false;\n      }).map(pokemon => fetch(pokemon.url).then(response => response.json()).then(data => {\n        return {\n          'link': '/pokemon/' + data.id,\n          'name': capitalizeFirstLetter(data.name),\n          'img': data.sprites.other['official-artwork'].front_default,\n          'id': data.id\n        };\n      }))).then(data => {\n        if (isMounted) {\n          if (!previous.current) {\n            setPokemons(data);\n            previous.current = true;\n          } else {\n            setPokemons([...pokemons, ...data]);\n          }\n        }\n      });\n    }).catch(error => {\n      if (isMounted) {\n        console.log(error);\n        setError('Error on load.');\n      }\n    }).finally(() => {\n      if (isMounted) {\n        setIsLoading(false);\n      }\n    });\n  }, [error, pokemons, term, url]);\n  useEffect(() => {\n    let isMounted = true;\n    setIsLoading(true);\n    loadPokemons(isMounted);\n    return () => {\n      abortController.abort();\n      isMounted = false;\n    };\n  }, [url, loadPokemons, abortController]);\n  return {\n    next,\n    isLoading,\n    error,\n    pokemons,\n    loadPokemons\n  };\n};\n\n_s(useApiRequest, \"BgmcvEU6pam1x1GAZHx3BZlR7T4=\", false, function () {\n  return [useParams];\n});\n\nexport default useApiRequest;","map":{"version":3,"sources":["/home/erison/Documents/Projetos/Pokedex-ReactJS/src/hooks/useApiRequest.js"],"names":["useState","useEffect","useCallback","useRef","useMemo","useParams","capitalizeFirstLetter","useApiRequest","url","next","setNext","isLoading","setIsLoading","error","setError","pokemons","setPokemons","term","abortController","AbortController","ab","previous","loadPokemons","isMounted","fetch","signal","then","response","json","dataSet","Promise","all","results","filter","pokemon","name","includes","map","data","id","sprites","other","front_default","current","catch","console","log","finally","abort"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback , useRef, useMemo } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport capitalizeFirstLetter from \"../utils/helpers\"\n\nconst useApiRequest = url => {\n\n    const [next, setNext] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState(null)\n    const [pokemons, setPokemons] = useState([])\n\n    const { term } = useParams()\n\n    const abortController = useMemo(() => {new AbortController()}, [ab]) \n    const previous = useRef(null)\n\n    const loadPokemons = useCallback((isMounted) => {\n        if(error) {\n            setError(null)\n            setIsLoading(true)\n        }\n        fetch(url, { signal: AbortController.signal })\n        .then(response => response.json())\n        .then(dataSet => {\n            if(isMounted) {\n                setNext(dataSet.next)\n            }\n            Promise.all(dataSet.results.filter(pokemon => {\n                if(!term) {\n                    return pokemon\n                } else if (pokemon.name.includes(term)) {\n                    return pokemon\n                }\n                return false\n            }).map(pokemon => \n                fetch(pokemon.url)\n                .then(response => response.json())\n                .then(data => {\n                    return {\n                        'link': '/pokemon/' + data.id ,\n                        'name': capitalizeFirstLetter(data.name),\n                        'img' : data.sprites.other['official-artwork'].front_default,\n                        'id': data.id\n                    }\n                })\n            ))\n            .then(data => {\n                if(isMounted) {\n                    if(!previous.current) {\n                        setPokemons(data)\n                        previous.current = true\n                    } else {\n                        setPokemons([...pokemons, ...data])\n                    }\n                }\n            })\n        })\n        .catch(error => {\n            if(isMounted) {\n                console.log(error)\n                setError('Error on load.')\n            }\n        })\n        .finally(() => {\n            if(isMounted) {\n                setIsLoading(false)       \n            }\n        })\n    }, [error, pokemons, term, url])\n\n    useEffect(() => {\n        let isMounted = true\n        setIsLoading(true)\n        loadPokemons(isMounted)\n        return () => {\n            abortController.abort()\n            isMounted = false\n        }\n    }, [url, loadPokemons, abortController])\n\n    return { next, isLoading, error, pokemons, loadPokemons }\n\n}\n\nexport default useApiRequest;"]},"metadata":{},"sourceType":"module"}