{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useApiRequest = url => {\n  _s();\n\n  const [next, setNext] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pokemons, setPokemons] = useState([]);\n  const abortController = new AbortController();\n  let isCancelled = false;\n\n  const loadPokemons = () => {\n    if (error) {\n      setError(null);\n      setIsLoading(true);\n    }\n\n    fetch(url, {\n      signal: AbortController.signal\n    }).then(response => response.json()).then(PokemonData => {\n      PokemonData.results.map(result => console.log(result.url)); // Promise.all(PokemonData.results.map(pokemon => fetch(pokemon.url)))\n    }).catch(error => {\n      if (!isCancelled) {\n        console.log(error);\n        setError('Error on load.');\n      }\n    }).finally(() => {\n      if (!isCancelled) {\n        setIsLoading(false);\n      }\n    });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    loadPokemons();\n    return () => {\n      abortController.abort();\n      isCancelled = true;\n    };\n  }, [url]);\n  return {\n    next,\n    isLoading,\n    error,\n    pokemons,\n    loadPokemons\n  };\n};\n\n_s(useApiRequest, \"CbqyQcFJnsjVOfDw4YJS2U20De4=\");\n\nexport default useApiRequest;","map":{"version":3,"sources":["/home/erison/Documents/Projetos/Pokedex-ReactJS/src/hooks/useApiRequest.js"],"names":["useState","useEffect","useApiRequest","url","next","setNext","isLoading","setIsLoading","error","setError","pokemons","setPokemons","abortController","AbortController","isCancelled","loadPokemons","fetch","signal","then","response","json","PokemonData","results","map","result","console","log","catch","finally","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAGC,GAAG,IAAI;AAAA;;AAEzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMY,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,MAAIC,WAAW,GAAG,KAAlB;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACvB,QAAGP,KAAH,EAAU;AACNC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AACDS,IAAAA,KAAK,CAACb,GAAD,EAAM;AAAEc,MAAAA,MAAM,EAAEJ,eAAe,CAACI;AAA1B,KAAN,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,WAAW,IAAI;AACjBA,MAAAA,WAAW,CAACC,OAAZ,CAAoBC,GAApB,CAAwBC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACrB,GAAnB,CAAlC,EADiB,CAEjB;AAEH,KAND,EAOCwB,KAPD,CAOOnB,KAAK,IAAI;AACZ,UAAG,CAACM,WAAJ,EAAiB;AACbW,QAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACAC,QAAAA,QAAQ,CAAC,gBAAD,CAAR;AACH;AACJ,KAZD,EAaCmB,OAbD,CAaS,MAAM;AACX,UAAG,CAACd,WAAJ,EAAiB;AACbP,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,KAjBD;AAkBH,GAvBD;;AAyBAN,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAQ,IAAAA,YAAY;AACZ,WAAO,MAAM;AACTH,MAAAA,eAAe,CAACiB,KAAhB;AACAf,MAAAA,WAAW,GAAG,IAAd;AACH,KAHD;AAIH,GAPQ,EAON,CAACX,GAAD,CAPM,CAAT;AASA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA,KAAnB;AAA0BE,IAAAA,QAA1B;AAAoCK,IAAAA;AAApC,GAAP;AAEH,CA9CD;;GAAMb,a;;AAgDN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect } from \"react\"\n\nconst useApiRequest = url => {\n\n    const [next, setNext] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState(null)\n    const [pokemons, setPokemons] = useState([])\n\n    const abortController = new AbortController()\n    let isCancelled = false\n\n    const loadPokemons = () => {\n        if(error) {\n            setError(null)\n            setIsLoading(true)\n        }\n        fetch(url, { signal: AbortController.signal })\n        .then(response => response.json())\n        .then(PokemonData => {\n            PokemonData.results.map(result => console.log(result.url))\n            // Promise.all(PokemonData.results.map(pokemon => fetch(pokemon.url)))\n            \n        })\n        .catch(error => {\n            if(!isCancelled) {\n                console.log(error)\n                setError('Error on load.')\n            }\n        })\n        .finally(() => {\n            if(!isCancelled) {\n                setIsLoading(false)\n            }\n        })\n    }\n\n    useEffect(() => {\n        setIsLoading(true)\n        loadPokemons()\n        return () => {\n            abortController.abort()\n            isCancelled = true\n        }\n    }, [url])\n\n    return { next, isLoading, error, pokemons, loadPokemons }\n\n}\n\nexport default useApiRequest;"]},"metadata":{},"sourceType":"module"}