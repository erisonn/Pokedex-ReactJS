{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst useApiRequest = url => {\n  _s();\n\n  const [next, setNext] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pokemons, setPokemons] = useState([]);\n  const abortController = new AbortController();\n  let isCancelled = false;\n\n  const loadPokemons = () => {\n    if (error) {\n      setError(null);\n      setIsLoading(true);\n    }\n\n    fetch(url, {\n      signal: AbortController.signal\n    }).then(response => response.json()).then(dataSet => {\n      Promise.all(dataSet.results.map(result => fetch(result.url).then(response => response.json()).then(data => {\n        return {\n          'name': capitalizeFirstLetter(data.name),\n          'img': data.sprites.other['official-artwork'].front_default,\n          'id': data.id,\n          'types': data.types,\n          'weight': 'Weight: ' + data.weight / 10 + ' kg',\n          'height': 'Height: ' + data.height / 10 + ' m',\n          'ability': 'Ability: ' + capitalizeFirstLetter(data.abilities[0].ability.name),\n          'stats': data.stats\n        };\n      }))).then(data => console.log(data));\n    }).catch(error => {\n      if (!isCancelled) {\n        console.log(error);\n        setError('Error on load.');\n      }\n    }).finally(() => {\n      if (!isCancelled) {\n        setIsLoading(false);\n      }\n    });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    loadPokemons();\n    return () => {\n      abortController.abort();\n      isCancelled = true;\n    };\n  }, [url]);\n  return {\n    next,\n    isLoading,\n    error,\n    pokemons,\n    loadPokemons\n  };\n};\n\n_s(useApiRequest, \"CbqyQcFJnsjVOfDw4YJS2U20De4=\");\n\nexport default useApiRequest;","map":{"version":3,"sources":["/home/erison/Documents/Projetos/Pokedex-ReactJS/src/hooks/useApiRequest.js"],"names":["useState","useEffect","useApiRequest","url","next","setNext","isLoading","setIsLoading","error","setError","pokemons","setPokemons","abortController","AbortController","isCancelled","loadPokemons","fetch","signal","then","response","json","dataSet","Promise","all","results","map","result","data","capitalizeFirstLetter","name","sprites","other","front_default","id","types","weight","height","abilities","ability","stats","console","log","catch","finally","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,aAAa,GAAGC,GAAG,IAAI;AAAA;;AAEzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAMY,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,MAAIC,WAAW,GAAG,KAAlB;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACvB,QAAGP,KAAH,EAAU;AACNC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AACDS,IAAAA,KAAK,CAACb,GAAD,EAAM;AAAEc,MAAAA,MAAM,EAAEJ,eAAe,CAACI;AAA1B,KAAN,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,OAAO,IAAI;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,OAAR,CAAgBC,GAAhB,CAAoBC,MAAM,IAClCV,KAAK,CAACU,MAAM,CAACvB,GAAR,CAAL,CACCe,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMS,IAAI,IAAI;AACV,eAAO;AACH,kBAAQC,qBAAqB,CAACD,IAAI,CAACE,IAAN,CAD1B;AAEX,iBAAQF,IAAI,CAACG,OAAL,CAAaC,KAAb,CAAmB,kBAAnB,EAAuCC,aAFpC;AAGX,gBAAML,IAAI,CAACM,EAHA;AAIX,mBAAUN,IAAI,CAACO,KAJJ;AAKX,oBAAU,aAAaP,IAAI,CAACQ,MAAL,GAAY,EAAzB,GAA8B,KAL7B;AAMX,oBAAU,aAAaR,IAAI,CAACS,MAAL,GAAY,EAAzB,GAA8B,IAN7B;AAOX,qBAAW,cAAcR,qBAAqB,CAACD,IAAI,CAACU,SAAL,CAAe,CAAf,EAAkBC,OAAlB,CAA0BT,IAA3B,CAPnC;AAQX,mBAASF,IAAI,CAACY;AARH,SAAP;AAUH,OAbD,CADQ,CAAZ,EAgBCrB,IAhBD,CAgBMS,IAAI,IAAIa,OAAO,CAACC,GAAR,CAAYd,IAAZ,CAhBd;AAiBH,KApBD,EAqBCe,KArBD,CAqBOlC,KAAK,IAAI;AACZ,UAAG,CAACM,WAAJ,EAAiB;AACb0B,QAAAA,OAAO,CAACC,GAAR,CAAYjC,KAAZ;AACAC,QAAAA,QAAQ,CAAC,gBAAD,CAAR;AACH;AACJ,KA1BD,EA2BCkC,OA3BD,CA2BS,MAAM;AACX,UAAG,CAAC7B,WAAJ,EAAiB;AACbP,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,KA/BD;AAgCH,GArCD;;AAuCAN,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAQ,IAAAA,YAAY;AACZ,WAAO,MAAM;AACTH,MAAAA,eAAe,CAACgC,KAAhB;AACA9B,MAAAA,WAAW,GAAG,IAAd;AACH,KAHD;AAIH,GAPQ,EAON,CAACX,GAAD,CAPM,CAAT;AASA,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,SAAR;AAAmBE,IAAAA,KAAnB;AAA0BE,IAAAA,QAA1B;AAAoCK,IAAAA;AAApC,GAAP;AAEH,CA5DD;;GAAMb,a;;AA8DN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect } from \"react\"\n\nconst useApiRequest = url => {\n\n    const [next, setNext] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState(null)\n    const [pokemons, setPokemons] = useState([])\n\n    const abortController = new AbortController()\n    let isCancelled = false\n\n    const loadPokemons = () => {\n        if(error) {\n            setError(null)\n            setIsLoading(true)\n        }\n        fetch(url, { signal: AbortController.signal })\n        .then(response => response.json())\n        .then(dataSet => {\n            Promise.all(dataSet.results.map(result => \n                fetch(result.url)\n                .then(response => response.json())\n                .then(data => {\n                    return {\n                        'name': capitalizeFirstLetter(data.name),\n                'img' : data.sprites.other['official-artwork'].front_default,\n                'id': data.id,\n                'types' : data.types,\n                'weight': 'Weight: ' + data.weight/10 + ' kg',\n                'height': 'Height: ' + data.height/10 + ' m',\n                'ability': 'Ability: ' + capitalizeFirstLetter(data.abilities[0].ability.name),\n                'stats': data.stats\n                    }\n                })\n            ))\n            .then(data => console.log(data))\n        })\n        .catch(error => {\n            if(!isCancelled) {\n                console.log(error)\n                setError('Error on load.')\n            }\n        })\n        .finally(() => {\n            if(!isCancelled) {\n                setIsLoading(false)\n            }\n        })\n    }\n\n    useEffect(() => {\n        setIsLoading(true)\n        loadPokemons()\n        return () => {\n            abortController.abort()\n            isCancelled = true\n        }\n    }, [url])\n\n    return { next, isLoading, error, pokemons, loadPokemons }\n\n}\n\nexport default useApiRequest;"]},"metadata":{},"sourceType":"module"}