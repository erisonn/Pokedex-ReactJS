{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport capitalizeFirstLetter from \"../utils/helpers\";\n\nconst useApiRequest = url => {\n  _s();\n\n  const [next, setNext] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pokemons, setPokemons] = useState([]);\n  const {\n    term\n  } = useParams();\n  const abortController = new AbortController();\n  const previous = useRef(null);\n\n  const handleSearch = data => {\n    const filteredPokemon = data.filter(pokemon => {\n      if (!term) {\n        return pokemon;\n      } else if (pokemon.name.toLowerCase().includes(term)) {\n        return pokemon;\n      }\n\n      return false;\n    });\n    return filteredPokemon;\n  };\n\n  const loadPokemons = isCancelled => {\n    if (error) {\n      setError(null);\n      setIsLoading(true);\n    }\n\n    fetch(url, {\n      signal: AbortController.signal\n    }).then(response => response.json()).then(dataSet => {\n      if (!isCancelled) {\n        setNext(dataSet.next);\n      }\n\n      Promise.all(dataSet.results.map(result => fetch(result.url).then(response => response.json()).then(data => {\n        return {\n          'link': '/pokemon/' + data.id,\n          'name': capitalizeFirstLetter(data.name),\n          'img': data.sprites.other['official-artwork'].front_default,\n          'id': data.id\n        };\n      }))).then(data => {\n        if (!isCancelled) {\n          if (!previous.current) {\n            setPokemons(handleSearch(data));\n            previous.current = true;\n          } else {\n            setPokemons([...pokemons, ...handleSearch(data)]);\n          }\n        }\n      });\n    }).catch(error => {\n      if (!isCancelled) {\n        console.log(error);\n        setError('Error on load.');\n      }\n    }).finally(() => {\n      if (!isCancelled) {\n        setIsLoading(false);\n      }\n    });\n  };\n\n  useEffect(() => {\n    let isCancelled = false;\n    setIsLoading(true);\n    loadPokemons(isCancelled);\n    return () => {\n      abortController.abort();\n      isCancelled = true;\n    };\n  }, [url]);\n  return {\n    next,\n    isLoading,\n    error,\n    pokemons,\n    loadPokemons\n  };\n};\n\n_s(useApiRequest, \"jA5wpSQp34XOEmOV0TNYM2HPsT4=\", false, function () {\n  return [useParams];\n});\n\nexport default useApiRequest;","map":{"version":3,"sources":["/home/erison/Documents/Projetos/Pokedex-ReactJS/src/hooks/useApiRequest.js"],"names":["useState","useEffect","useRef","useParams","capitalizeFirstLetter","useApiRequest","url","next","setNext","isLoading","setIsLoading","error","setError","pokemons","setPokemons","term","abortController","AbortController","previous","handleSearch","data","filteredPokemon","filter","pokemon","name","toLowerCase","includes","loadPokemons","isCancelled","fetch","signal","then","response","json","dataSet","Promise","all","results","map","result","id","sprites","other","front_default","current","catch","console","log","finally","abort"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport capitalizeFirstLetter from \"../utils/helpers\"\n\nconst useApiRequest = url => {\n\n    const [next, setNext] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState(null)\n    const [pokemons, setPokemons] = useState([])\n\n    const { term } = useParams()\n\n    const abortController = new AbortController()\n    const previous = useRef(null)\n\n    const handleSearch = (data) => {\n        const filteredPokemon = data.filter(pokemon => {\n            if (!term) {\n                return pokemon\n            } else if (pokemon.name.toLowerCase().includes(term)) {\n                return pokemon\n            }\n                return false\n            })\n            return filteredPokemon\n    }\n\n    const loadPokemons = (isCancelled) => {\n        if(error) {\n            setError(null)\n            setIsLoading(true)\n        }\n        fetch(url, { signal: AbortController.signal })\n        .then(response => response.json())\n        .then(dataSet => {\n            if(!isCancelled) {\n                setNext(dataSet.next)\n            }\n            Promise.all(dataSet.results.map(result => \n                fetch(result.url)\n                .then(response => response.json())\n                .then(data => {\n                    return {\n                        'link': '/pokemon/' + data.id ,\n                        'name': capitalizeFirstLetter(data.name),\n                        'img' : data.sprites.other['official-artwork'].front_default,\n                        'id': data.id\n                    }\n                })\n            ))\n            .then(data => {\n                if(!isCancelled) {\n                    if(!previous.current) {\n                        setPokemons(handleSearch(data))\n                        previous.current = true\n                    } else {\n                        setPokemons([...pokemons, ...handleSearch(data)])\n                    }\n                }\n            })\n        })\n        .catch(error => {\n            if(!isCancelled) {\n                console.log(error)\n                setError('Error on load.')\n            }\n        })\n        .finally(() => {\n            if(!isCancelled) {\n                setIsLoading(false)       \n            }\n        })\n    }\n\n    useEffect(() => {\n        let isCancelled = false\n        setIsLoading(true)\n        loadPokemons(isCancelled)\n        \n        return () => {\n            abortController.abort()\n            isCancelled = true\n        }\n    }, [url])\n\n    return { next, isLoading, error, pokemons, loadPokemons }\n\n}\n\nexport default useApiRequest;"]},"metadata":{},"sourceType":"module"}