{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\n\nconst useApiRequest = url => {\n  _s();\n\n  const [next, setNext] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [pokemons, setPokemons] = useState([]);\n  const [searchTerm, setSearchTerm] = useState(null);\n  const limit = useRef(153);\n  const abortController = new AbortController();\n  let isCancelled = false;\n\n  const loadPokemons = () => {\n    if (error) {\n      setError(null);\n      setIsLoading(true);\n    }\n\n    fetch(url, {\n      signal: AbortController.signal\n    }).then(response => response.json()).then(PokemonData => {\n      if (!isCancelled) {\n        setNext(PokemonData.next);\n\n        if (PokemonData.previous === null) {\n          setPokemons(PokemonData.results);\n        } else {\n          setPokemons([...pokemons, ...PokemonData.results]);\n        }\n      }\n    }).catch(error => {\n      if (!isCancelled) {\n        console.log(error);\n        setError('Error on load.');\n      }\n    }).finally(() => {\n      if (!isCancelled) {\n        setIsLoading(false);\n      }\n    });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    loadPokemons();\n    return () => {\n      abortController.abort();\n      isCancelled = true;\n    };\n  }, [url, searchTerm]);\n  return {\n    next,\n    isLoading,\n    error,\n    pokemons,\n    loadPokemons,\n    searchTerm,\n    setSearchTerm,\n    limit\n  };\n};\n\n_s(useApiRequest, \"EdX2e841bWt9baWFS64EYFBF4ww=\");\n\nexport default useApiRequest;","map":{"version":3,"sources":["/home/erison/Documents/Projetos/Pokedex-ReactJS/src/hooks/useApiRequest.js"],"names":["useState","useEffect","useRef","useApiRequest","url","next","setNext","isLoading","setIsLoading","error","setError","pokemons","setPokemons","searchTerm","setSearchTerm","limit","abortController","AbortController","isCancelled","loadPokemons","fetch","signal","then","response","json","PokemonData","previous","results","catch","console","log","finally","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;;AAEA,MAAMC,aAAa,GAAGC,GAAG,IAAI;AAAA;;AAEzB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AAEA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAMe,KAAK,GAAGb,MAAM,CAAC,GAAD,CAApB;AAEA,QAAMc,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACA,MAAIC,WAAW,GAAG,KAAlB;;AAEA,QAAMC,YAAY,GAAG,MAAM;AACvB,QAAGV,KAAH,EAAU;AACNC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AACDY,IAAAA,KAAK,CAAChB,GAAD,EAAM;AAAEiB,MAAAA,MAAM,EAAEJ,eAAe,CAACI;AAA1B,KAAN,CAAL,CACCC,IADD,CACMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADlB,EAECF,IAFD,CAEMG,WAAW,IAAI;AACjB,UAAG,CAACP,WAAJ,EAAiB;AACbZ,QAAAA,OAAO,CAACmB,WAAW,CAACpB,IAAb,CAAP;;AACA,YAAIoB,WAAW,CAACC,QAAZ,KAAyB,IAA7B,EAAmC;AAC/Bd,UAAAA,WAAW,CAACa,WAAW,CAACE,OAAb,CAAX;AACH,SAFD,MAEO;AACHf,UAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAc,GAAGc,WAAW,CAACE,OAA7B,CAAD,CAAX;AACH;AACJ;AACJ,KAXD,EAYCC,KAZD,CAYOnB,KAAK,IAAI;AACZ,UAAG,CAACS,WAAJ,EAAiB;AACbW,QAAAA,OAAO,CAACC,GAAR,CAAYrB,KAAZ;AACAC,QAAAA,QAAQ,CAAC,gBAAD,CAAR;AACH;AACJ,KAjBD,EAkBCqB,OAlBD,CAkBS,MAAM;AACX,UAAG,CAACb,WAAJ,EAAiB;AACbV,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACH;AACJ,KAtBD;AAuBH,GA5BD;;AA8BAP,EAAAA,SAAS,CAAC,MAAM;AACZO,IAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAW,IAAAA,YAAY;AAEZ,WAAO,MAAM;AACTH,MAAAA,eAAe,CAACgB,KAAhB;AACAd,MAAAA,WAAW,GAAG,IAAd;AACH,KAHD;AAIH,GATQ,EASN,CAACd,GAAD,EAAMS,UAAN,CATM,CAAT;AAWA,SAAO;AAACR,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA,KAAlB;AAAyBE,IAAAA,QAAzB;AAAmCQ,IAAAA,YAAnC;AAAiDN,IAAAA,UAAjD;AAA6DC,IAAAA,aAA7D;AAA4EC,IAAAA;AAA5E,GAAP;AAEH,CAxDD;;GAAMZ,a;;AA0DN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect, useRef } from \"react\"\n\nconst useApiRequest = url => {\n\n    const [next, setNext] = useState(null)\n    const [isLoading, setIsLoading] = useState(true)\n    const [error, setError] = useState(null)\n    const [pokemons, setPokemons] = useState([])\n\n    const [searchTerm, setSearchTerm] = useState(null)\n    const limit = useRef(153)\n\n    const abortController = new AbortController()\n    let isCancelled = false\n\n    const loadPokemons = () => {\n        if(error) {\n            setError(null)\n            setIsLoading(true)\n        }\n        fetch(url, { signal: AbortController.signal })\n        .then(response => response.json())\n        .then(PokemonData => {\n            if(!isCancelled) {\n                setNext(PokemonData.next)\n                if (PokemonData.previous === null) {\n                    setPokemons(PokemonData.results)\n                } else {\n                    setPokemons([...pokemons, ...PokemonData.results])\n                } \n            }    \n        })\n        .catch(error => {\n            if(!isCancelled) {\n                console.log(error)\n                setError('Error on load.')\n            }\n        })\n        .finally(() => {\n            if(!isCancelled) {\n                setIsLoading(false)\n            }\n        })\n    }\n\n    useEffect(() => {\n        setIsLoading(true)\n\n        loadPokemons()\n\n        return () => {\n            abortController.abort()\n            isCancelled = true\n        }\n    }, [url, searchTerm])\n\n    return {next, isLoading, error, pokemons, loadPokemons, searchTerm, setSearchTerm, limit }\n\n}\n\nexport default useApiRequest;"]},"metadata":{},"sourceType":"module"}