{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = callback => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n  useEffect(() => {\n    if (!isFetching) return;\n    callback(() => {\n      console.log('called back');\n    });\n  }, [isFetching]);\n\n  function handleScroll() {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\n    setIsFetching(true);\n  }\n\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"NA5CwANT1gxbcTuimobX/8A7Nig=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["/home/erison/Documents/Projetos/Pokedex-ReactJS/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","callback","isFetching","setIsFetching","window","addEventListener","handleScroll","removeEventListener","console","log","innerHeight","document","documentElement","scrollTop","offsetHeight"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AAAA;;AACtC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdK,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,YAAlC;AACA,WAAO,MAAMF,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCD,YAArC,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAP,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACG,UAAL,EAAiB;AACjBD,IAAAA,QAAQ,CAAC,MAAM;AACbO,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACD,KAFO,CAAR;AAGD,GALQ,EAKN,CAACP,UAAD,CALM,CAAT;;AAOA,WAASI,YAAT,GAAwB;AACtB,QAAIF,MAAM,CAACM,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KAA4DF,QAAQ,CAACC,eAAT,CAAyBE,YAArF,IAAqGZ,UAAzG,EAAqH;AACrHC,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AAED,SAAO,CAACD,UAAD,EAAaC,aAAb,CAAP;AACD,CArBD;;GAAMH,iB;;AAuBN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = (callback) => {\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  useEffect(() => {\n    if (!isFetching) return;\n    callback(() => {\n      console.log('called back');\n    });\n  }, [isFetching]);\n\n  function handleScroll() {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\n    setIsFetching(true);\n  }\n\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;"]},"metadata":{},"sourceType":"module"}