{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = (next, callback) => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n  useEffect(() => {\n    if (!isFetching) return;\n\n    if (next) {}\n\n    ;\n  }, [isFetching]);\n\n  function handleScroll() {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\n    setIsFetching(true);\n  }\n\n  return [isFetching, setIsFetching];\n};\n\n_s(useInfiniteScroll, \"NA5CwANT1gxbcTuimobX/8A7Nig=\");\n\nexport default useInfiniteScroll;","map":{"version":3,"sources":["/home/erison/Documents/Projetos/Pokedex-ReactJS/src/hooks/useInfiniteScroll.js"],"names":["useState","useEffect","useInfiniteScroll","next","callback","isFetching","setIsFetching","window","addEventListener","handleScroll","removeEventListener","innerHeight","document","documentElement","scrollTop","offsetHeight"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,iBAAiB,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB;AAAA;;AAC5C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,YAAlC;AACA,WAAO,MAAMF,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqCD,YAArC,CAAb;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACI,UAAL,EAAiB;;AACjB,QAAGF,IAAH,EAAS,CAER;;AAAA;AACF,GALQ,EAKN,CAACE,UAAD,CALM,CAAT;;AAOA,WAASI,YAAT,GAAwB;AACtB,QAAIF,MAAM,CAACI,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,SAA9C,KAA4DF,QAAQ,CAACC,eAAT,CAAyBE,YAArF,IAAqGV,UAAzG,EAAqH;AACrHC,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AAED,SAAO,CAACD,UAAD,EAAaC,aAAb,CAAP;AACD,CArBD;;GAAMJ,iB;;AAuBN,eAAeA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useInfiniteScroll = (next, callback) => {\n  const [isFetching, setIsFetching] = useState(false);\n\n  useEffect(() => {\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  useEffect(() => {\n    if (!isFetching) return;\n    if(next) {\n        \n    };\n  }, [isFetching]);\n\n  function handleScroll() {\n    if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || isFetching) return;\n    setIsFetching(true);\n  }\n\n  return [isFetching, setIsFetching];\n};\n\nexport default useInfiniteScroll;"]},"metadata":{},"sourceType":"module"}